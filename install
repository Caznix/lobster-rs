#!/bin/bash

set -euo pipefail

USER_AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"

API_URL="https://api.github.com/repos/eatmynerds/lobster-rs/releases/latest"

TEMP_DIR="./temp-lobster"

if [[ -d "$TEMP_DIR" ]]; then
    rm -rf "$TEMP_DIR"
fi
mkdir -p "$TEMP_DIR"

echo "Fetching release information..."
RESPONSE=$(curl -sSL -H "User-Agent: $USER_AGENT" "$API_URL")

DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[0].browser_download_url')

if [[ -z "$DOWNLOAD_URL" ]]; then
    echo "Error: Could not find a download URL in the API response."
    exit 1
fi
echo "Found download URL: $DOWNLOAD_URL"

echo "Downloading asset..."
ZIP_FILE="$TEMP_DIR/asset.zip"
curl -sSL "$DOWNLOAD_URL" -o "$ZIP_FILE"

echo "Extracting asset..."
unzip -q "$ZIP_FILE" -d "$TEMP_DIR"

OS=$(uname -s | tr '[:upper:]' '[:lower:]')
ARCH=$(uname -m)

case "$OS" in
    *linux*)
        if [[ "$ARCH" == "x86_64" ]]; then
            BUILD_TARGET="x86_64-unknown-linux-gnu_lobster-rs"
        else
            BUILD_TARGET="${ARCH}-unknown-linux-gnu_lobster-rs"
        fi
        ;;
    *darwin*)
        if [[ "$ARCH" == "x86_64" ]]; then
            BUILD_TARGET="x86_64-apple-darwin_lobster-rs"
        else
            BUILD_TARGET="aarch64-apple-darwin_lobster-rs"
        fi
        ;;
    *cygwin* | *mingw* | *msys* | *windows_nt*)
        if [[ "$ARCH" == "x86_64" ]]; then
            BUILD_TARGET="x86_64-pc-windows-msvc_lobster-rs.exe"
        else
            BUILD_TARGET="aarch64-pc-windows-msvc_lobster-rs.exe"
        fi
        ;;
    *)
        echo "Error: Unsupported platform $OS-$ARCH"
        exit 1
        ;;
esac

echo "Looking for build target: $BUILD_TARGET"

FOUND_FILE=$(find "$TEMP_DIR" -type f -name "$BUILD_TARGET")

if [[ -z "$FOUND_FILE" ]]; then
    echo "Error: Could not find the build target file in the extracted assets."
    exit 1
fi

DEST_FILENAME="lobster-rs"
if [[ "$OS" == "windows_nt" ]]; then
    DEST_FILENAME="$DEST_FILENAME.exe"
fi

DEST_PATH="./$DEST_FILENAME"
if [[ -f "$DEST_PATH" ]]; then
    rm "$DEST_PATH"
fi

mv "$FOUND_FILE" "$DEST_PATH"
chmod +x "$DEST_PATH"

echo "Cleaning up..."
rm -rf "$TEMP_DIR"

echo "Done! The binary has been saved to $DEST_PATH."

