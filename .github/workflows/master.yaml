name: Build Rust project
on:
  push:
    tags: ['v*']
permissions: write-all
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux ARM64
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            arch: arm64
            use_cross: true
          # Linux AMD64
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            arch: amd64
            use_cross: false
          # macOS ARM64
          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            arch: arm64
            use_cross: true
          # macOS AMD64
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            arch: amd64
            use_cross: false
          # Windows AMD64
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            arch: amd64
            use_cross: false
    steps:
      - uses: actions/checkout@v4
      
      # Setup MSVC on Windows
      - name: Setup MSVC
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
          
      - name: Install OpenSSL for ARM64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config gcc-aarch64-linux-gnu libssl-dev:arm64
          # Export OpenSSL environment variables
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "AARCH64_UNKNOWN_LINUX_GNU_OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          
      - name: Install cross
        if: matrix.use_cross
        run: |
          cargo install cross
          
      - name: Build with cross
        if: matrix.use_cross
        env:
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        run: |
          cross build --release --target ${{ matrix.target }}
          
      - name: Build without cross
        if: "!matrix.use_cross"
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Prepare binary for upload (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          rm -f *.d
          mv lobster-rs lobster-rs-${{ matrix.os }}-${{ matrix.arch }}
          
      - name: Prepare binary for upload (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          move lobster-rs.exe lobster-rs-${{ matrix.os }}-${{ matrix.arch }}.exe
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lobster-rs-${{ matrix.os }}-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/lobster-rs-*
          
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lobster-rs-*
          merge-multiple: true
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: lobster-rs-*
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true
