name: Build Rust project
on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, aarch64]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      if: runner.os == 'Linux'  # Only needed for Linux
      run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

    - name: Debug OpenSSL Path
      if: runner.os == 'Linux'  # Only needed for Linux
      run: |
        echo "OpenSSL version:"
        openssl version || echo "OpenSSL not found"
        echo "OpenSSL directory:"
        find /usr/lib -name '*ssl*' -type d || echo "No SSL directory found"

    - name: Set OpenSSL Path
      if: runner.os == 'Linux'  # Only needed for Linux
      run: echo "Setting OPENSSL_DIR for Linux builds"
      env:
        OPENSSL_DIR: /usr/lib/ssl

    - name: Set up Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: stable

    - name: Install cross-compilation targets
      run: |
        case ${{ matrix.arch }}-${{ matrix.os }} in
          x86_64-ubuntu-latest)
            rustup target add x86_64-unknown-linux-gnu ;;
          aarch64-ubuntu-latest)
            rustup target add aarch64-unknown-linux-gnu ;;
          x86_64-macos-latest)
            rustup target add x86_64-apple-darwin ;;
          aarch64-macos-latest)
            rustup target add aarch64-apple-darwin ;;
          x86_64-windows-latest)
            rustup target add x86_64-pc-windows-msvc ;;
          aarch64-windows-latest)
            rustup target add aarch64-pc-windows-msvc ;;
        esac

    - name: Build project
      run: |
        case ${{ matrix.arch }}-${{ matrix.os }} in
          x86_64-ubuntu-latest)
            cargo build --release --target x86_64-unknown-linux-gnu ;;
          aarch64-ubuntu-latest)
            cargo build --release --target aarch64-unknown-linux-gnu ;;
          x86_64-macos-latest)
            cargo build --release --target x86_64-apple-darwin ;;
          aarch64-macos-latest)
            cargo build --release --target aarch64-apple-darwin ;;
          x86_64-windows-latest)
            cargo build --release --target x86_64-pc-windows-msvc ;;
          aarch64-windows-latest)
            cargo build --release --target aarch64-pc-windows-msvc ;;
        esac

    - name: Move output binary
      run: |
        mkdir -p artifacts
        mv target/${{ matrix.arch }}-unknown-${{ matrix.os }}/release/lobster-rs artifacts/lobster-rs-${{ matrix.arch }}-${{ matrix.os }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: lobster-rs-${{ matrix.arch }}-${{ matrix.os }}
        path: artifacts/lobster-rs-${{ matrix.arch }}-${{ matrix.os }}
