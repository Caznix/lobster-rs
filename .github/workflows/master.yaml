name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [aarch64, amd64]
        include:
          - os: ubuntu-latest
            openssl_package: libssl-dev
            pkg_config: pkg-config
            target: aarch64-unknown-linux-gnu
            openssl_dir: /usr
          - os: ubuntu-latest
            openssl_package: libssl-dev
            pkg_config: pkg-config
            target: x86_64-unknown-linux-gnu
            openssl_dir: /usr
          - os: macos-latest
            openssl_package: openssl@1.1
            pkg_config: pkg-config
            target: aarch64-apple-darwin
            openssl_dir: /opt/homebrew/opt/openssl@1.1
          - os: macos-latest
            openssl_package: openssl@1.1
            pkg_config: pkg-config
            target: x86_64-apple-darwin
            openssl_dir: /opt/homebrew/opt/openssl@1.1
          - os: windows-latest
            openssl_package: openssl
            pkg_config: pkg-config
            target: aarch64-pc-windows-msvc
            openssl_dir: C:/Program Files/OpenSSL-Win64
          - os: windows-latest
            openssl_package: openssl
            pkg_config: pkg-config
            target: x86_64-pc-windows-msvc
            openssl_dir: C:/Program Files/OpenSSL-Win64

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          if [[ $RUNNER_OS == 'Linux' ]]; then
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.openssl_package }} pkg-config
          elif [[ $RUNNER_OS == 'macOS' ]]; then
            brew install ${{ matrix.openssl_package }} pkg-config
          elif [[ $RUNNER_OS == 'Windows' ]]; then
            choco install openssl
          fi

      - name: Set environment variables
        run: |
          echo "OPENSSL_DIR=${{ matrix.openssl_dir }}" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${{ matrix.openssl_dir }}/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG=${{ matrix.pkg_config }}" >> $GITHUB_ENV

      - name: Build for ${{ matrix.target }}
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

