name: Build Lobster Rust

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os }}

    steps:
    - name: üì• Clone repository
      uses: actions/checkout@v3
    
    - name: üõ†Ô∏è Install cross-compilation dependencies (Ubuntu AMD)
      if: runner.os == 'Linux' 
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user 

    - name: üõ†Ô∏è Install cross-compilation dependencies (Ubuntu ARM)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt-get update
        sudo apt-get install -y libssl-dev:armhf

    - name: üõ†Ô∏è Install cross-compilation dependencies (macOSüçé) 
      if: runner.os == 'macOS'
      run: |
        brew install FiloSottile/musl-cross/musl-cross
        
    - name: üîß Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        target: ${{ matrix.target }}
        profile: minimal
    
    - name: üèóÔ∏è Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      
    - name: üß™ Run tests
      if: matrix.target != 'aarch64-pc-windows-msvc'
      uses: actions-rs/cargo@v1 
      with:
        command: test
        args: --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        QEMU_LD_PREFIX: /usr/aarch64-linux-gnu

    - name: üì¶ Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lobster-rs-${{ runner.os }}-${{ matrix.arch }}-bin
        path: target/${{ matrix.target }}/release/lobster-rs*
