name: Build

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, aarch64]
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
          # Android targets
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-linux-android
            is_android: true
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-linux-android
            is_android: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: üì• Clone repository
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux' 
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user

      - name: üõ†Ô∏è Install cross-compilation dependencies (macOSüçé)
        if: runner.os == 'macOS'
        run: |
          brew install FiloSottile/musl-cross/musl-cross

      - name: üîß Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      - name: üõ†Ô∏è Install cross-compilation dependencies (Ubuntu ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          env CROSS_CONTAINER_IN_CONTAINER=true
          cargo install cross

      - name: üèóÔ∏è Build
        uses: actions-rs/cargo@v1
        if: "!matrix.is_android && matrix.target != 'aarch64-unknown-linux-gnu'"
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc


      # Android NDK installation and OpenSSL configuration
      - name: üì± Install Android NDK and configure OpenSSL
        if: matrix.is_android
        run: |
          sudo apt-get install -y unzip wget libssl-dev
          wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r25b" >> $GITHUB_ENV
          echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          cargo install cargo-ndk
          
          # Install OpenSSL for Android
          git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable openssl-src
          cd openssl-src
          
          # Configure and build OpenSSL for Android
          export ANDROID_NDK_HOME=$PWD/../android-ndk-r25b
          export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
          
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            # Configure for ARM64
            ./Configure android-arm64 -D__ANDROID_API__=21 --prefix=$PWD/../openssl-android-arm64
            make -j4
            make install_sw
            echo "OPENSSL_DIR=$PWD/../openssl-android-arm64" >> $GITHUB_ENV
          else
            # Configure for x86_64
            ./Configure android-x86_64 -D__ANDROID_API__=21 --prefix=$PWD/../openssl-android-x86_64
            make -j4
            make install_sw
            echo "OPENSSL_DIR=$PWD/../openssl-android-x86_64" >> $GITHUB_ENV
          fi
          
          cd ..

      # Standard build for most targets
      - name: üèóÔ∏è Build (Standard)
        if: "!matrix.is_android && matrix.target != 'aarch64-unknown-linux-gnu'"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      # Special build for ARM Linux
      - name: üèóÔ∏è Build (Ubuntu ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cross build --release --target ${{ matrix.target }}

      # Android build with fallback options
      - name: üì± Build for Android
        if: matrix.is_android
        run: |
          # Try building with OpenSSL configuration
          cargo ndk -t ${{ matrix.arch }}-linux-android build --release || \
          # If that fails, try building with no-default-features to avoid OpenSSL
          cargo ndk -t ${{ matrix.arch }}-linux-android build --release --no-default-features || \
          # Last resort: Try building with specific OPENSSL_STATIC flag
          OPENSSL_STATIC=1 cargo ndk -t ${{ matrix.arch }}-linux-android build --release --no-default-features

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lobster-rs*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create GitHub release ‚úàÔ∏è
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            This is the release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      - name: Zip all binaries üì•
        run: |
          find release -type f ! -name "*.d" -exec sh -c 'cp "$1" "$(dirname "$1" | xargs basename)_$(basename "$1")"' _ {} \;
          chmod +x *apple-darwin*
          chmod +x *linux-gnu*
          zip -r lobster-rs.zip *lobster-rs*

      - name: Upload zip to release üì§
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lobster-rs.zip
          asset_name: lobster-rs.zip
          asset_content_type: application/zip
