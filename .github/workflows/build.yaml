name: Build

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, aarch64]
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
          # Android targets
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-linux-android
            is_android: true
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-linux-android
            is_android: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📥 Clone repository
        uses: actions/checkout@v3

      - name: 🛠️ Install cross-compilation dependencies (Linux)
        if: runner.os == 'Linux' && !matrix.is_android
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu qemu-user
          cargo install cross --git https://github.com/rust-embedded/cross

      - name: 🔧 Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}
          profile: minimal

      # Android setup
      - name: 📱 Install Android NDK and configure OpenSSL
        if: matrix.is_android
        run: |
          sudo apt-get install -y unzip wget libssl-dev
          wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r25b" >> $GITHUB_ENV
          echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          cargo install cargo-ndk
      
      - name: 🏗️ Build (Standard)
        if: "!matrix.is_android && matrix.target != 'aarch64-unknown-linux-gnu'"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: 🏗️ Build (Ubuntu ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu' && !matrix.is_android
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: 📱 Build for Android
        if: matrix.is_android
        run: |
          cargo ndk -t ${{ matrix.arch }}-linux-android build --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lobster-rs*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create GitHub release ✈️
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            This is the release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      - name: Zip all binaries 📥
        run: |
          find release -type f ! -name "*.d" -exec sh -c 'cp "$1" "$(dirname "$1" | xargs basename)_$(basename "$1")"' _ {} \;
          ls -a

      - name: Upload zip to release 📤
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: lobster-rs.zip
          asset_name: lobster-rs.zip
          asset_content_type: application/zip
